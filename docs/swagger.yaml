definitions:
  dto.Login:
    properties:
      Name:
        type: string
      password:
        type: string
    type: object
  task.Task:
    properties:
      CreatedTime:
        type: string
      Id:
        type: integer
      Note:
        type: string
      Priority:
        type: string
      Status:
        type: string
      Title:
        type: string
      UpdatedTime:
        type: string
      authorId:
        type: integer
    type: object
  user.Role:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Creator
    - Manager
  user.User:
    properties:
      Name:
        type: string
      Role:
        $ref: '#/definitions/user.Role'
      id:
        type: integer
      password:
        type: string
    type: object
host: localhost:8090
info:
  contact: {}
  description: This is a sample server for managing tasks.
  title: Task Manager API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /tasks/:
    get:
      consumes:
      - application/json
      description: Get All tasks from file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/task.Task'
            type: array
      summary: Get Tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Insert task into file
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/task.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Insert task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete task in slice and file
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete task by ID
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Get Task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
      summary: Get Task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update task in slice and file
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task to update
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/task.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update task by ID
      tags:
      - tasks
  /users/:
    get:
      consumes:
      - application/json
      description: Get All Users from file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
      summary: Get Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Insert user into slice and file
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Insert user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user in slice and file
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get User by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
      summary: Get User
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user in slice and file
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid input
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
